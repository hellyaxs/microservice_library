services:
  api-java:
    extends:
      file: ./api-java-person/docker-compose.yaml
      service: api-java
    depends_on:
      rabbitmq:
         condition: service_healthy
      database:
        condition: service_healthy
    networks:
      - backend
    env_file:
      - .env
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 512M
  api-nestjs:
    extends:
      file: ./api-nestjs-gateway/docker-compose.yaml
      service: api-nestjs  
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      - RABBITMQ_URL=${RABBITMQ_URL}
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 512M

  api-flask:
    extends:
      file: ./api-flask-pagamentos/docker-compose.yaml
      service: api-flask
    depends_on:
      rabbitmq:
        condition: service_healthy
    volumes:
      - .env:/app/.env
    networks:
      - backend
    environment:
       - PYTHONUNBUFFERED=1
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 512M

  api-golang:
    extends:
        file: ./api-golang-notificacoes/docker-compose.yaml
        service: api-golang
    depends_on:
      api-nestjs:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - .env:/root/.env
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 512M

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - backend
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_ADMIN}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_ADMIN_PASSWORD}
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 10s
      timeout: 5s
      retries: 2
      start_period: 10s
    command: >
      sh -c "
      rabbitmq-server &
      pid=\$!;
      echo 'Aguardando o RabbitMQ iniciar...';
      while ! rabbitmqctl status >/dev/null 2>&1; do sleep 1; done;
      rabbitmqctl add_user ${RABBITMQ_USER} ${RABBITMQ_PASSWORD};
      rabbitmqctl set_permissions -p / ${RABBITMQ_USER} '.*' '.*' '.*';
      wait \$$pid"

  database:
    image: postgres:15
    ports:
      - "5432:5432"
    networks:
      - backend
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}   
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${DB_USER}", "-d", "${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

networks:
  backend:
    driver: bridge
